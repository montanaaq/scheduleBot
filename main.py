#                                                         Imports
from aiogram import Dispatcher, Bot, types
from aiogram.utils import executor
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext

from apscheduler.schedulers.asyncio import AsyncIOScheduler

from datetime import datetime
from config import BOT_TOKEN, admin_id

import T10.messages_10t_1 as msg_10t_1
import T10.messages_10t_2 as msg_10t_2
import keyboards as kb
import T10.send_messages_10t as send_msg_10t

import sqlite3 as sql

from background import keep_alive

db = sql.connect('database.db')
cur = db.cursor()


async def db_start():
    cur.execute("""CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT,
                tg_id INTEGER,
                class_id TEXT DEFAULT '1',
                group_id INTEGER DEFAULT 1,
                isNotified INTEGER DEFAULT 0
                )""")    
    db.commit()

async def main():
    await send_message_cron()

async def on_startup(_):
    await db_start()
    
    # await msg_10t_1.create_subjects()
    # await msg_10t_2.create_subjects()
    # await msg_10t_1.start_db_1()
    # await msg_10t_2.start_db_2()

    await msg_10t_1.create_subjects()
    await msg_10t_1.add_subjects()
    await msg_10t_2.create_subjects()
    await msg_10t_2.add_subjects()


    print('Database started!')
    print('Bot started!')

class Form(StatesGroup):
    my_message = State()
    check_class = State()

storage = MemoryStorage()
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot, storage=storage)


# ---------------------------------------------------- Notifications ---------------------------------------------------
# @dp.message_handler(commands=['webapp'])
# async def webapp(message: types.Message):
#     markup = types.ReplyKeyboardMarkup()
#     webapp = types.WebAppInfo("https://schedule-bot.netlify.app")
#     web = types.KeyboardButton('üîó –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', web_app=webapp)
#     markup.add(web)
#     await bot.send_message(chat_id=message.chat.id, text='–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç', reply_markup=markup)

@dp.message_handler(commands=['notify'])
async def notifications(message: types.Message):
    markup = types.InlineKeyboardMarkup()
    on = types.InlineKeyboardButton('üîî –í–∫–ª—é—á–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è', callback_data='on_notifications')
    off = types.InlineKeyboardButton('üîï –í—ã–∫–ª—é—á–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è', callback_data='off_notifications')
    markup.add(on)
    markup.add(off)
    if message.from_user.id == message.chat.id:
        await bot.send_message(chat_id=message.chat.id,
                           text='–ß—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –≤—ã–∫–ª—é—á–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.',
                           reply_markup=markup)
    else:
        await bot.send_message(chat_id=message.chat.id, text="–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö!")

async def notify_db(id, isNotified):
    cur.execute('UPDATE users SET isNotified = "{isNotified}" WHERE tg_id = "{id}"'.format(isNotified=isNotified, id=id))
    db.commit()

async def on_notify(message: types.Message):
    await bot.send_message(chat_id=message.chat.id,
                           text='‚úÖ –£—Å–ø–µ—à–Ω–æ! –û–ø–æ–≤–µ—â–µ–Ω–∏—è –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ <i>–≤–∫–ª—é—á–µ–Ω—ã</i>. <b>–û–Ω–∏ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å [–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–°—É–±–±–æ—Ç–∞] –≤ 7:45.</b>',
                           parse_mode='html')


async def off_notify(message: types.Message):
    await bot.send_message(chat_id=message.chat.id,
                           text='‚úÖ –£—Å–ø–µ—à–Ω–æ! –û–ø–æ–≤–µ—â–µ–Ω–∏—è –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ <i>–≤—ã–∫–ª—é—á–µ–Ω—ã</i>. <b>–¢–µ–ø–µ—Ä—å –æ–Ω–∏ –Ω–µ –±—É–¥—É—Ç –±–æ–ª—å—à–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç—å.</b>',
                           parse_mode='html')

async def send_message_cron():
    users_first = [row[0] for row in cur.execute('SELECT tg_id FROM users WHERE isNotified = "{isNotified}" AND group_id = "{group_id}"'.format(isNotified=1, group_id=1)).fetchall()]
    users_second = [i[0] for i in cur.execute('SELECT tg_id FROM users WHERE isNotified = "{isNotified}" AND group_id = "{group_id}"'.format(isNotified=1, group_id=2)).fetchall()]
    for user in users_first:
        if datetime.now().weekday() == 0:
            await bot.send_message(chat_id=user, text=msg_10t_1.monday, parse_mode='html')
        if datetime.now().weekday() == 1:
            await bot.send_message(chat_id=user, text=msg_10t_1.tuesday_first, parse_mode='html')
        if datetime.now().weekday() == 2:
            await bot.send_message(chat_id=user, text=msg_10t_1.wednesday_first, parse_mode='html')
        if datetime.now().weekday() == 3:
            await bot.send_message(chat_id=user, text=msg_10t_1.thursday_first, parse_mode='html')
        if datetime.now().weekday() == 4:
            await bot.send_message(chat_id=user, text=msg_10t_1.friday, parse_mode='html')
        if datetime.now().weekday() == 5:
            await bot.send_message(chat_id=user, text=msg_10t_1.saturday_first, parse_mode='html')
    for user_2 in users_second:
        if datetime.now().weekday() == 0:
            await bot.send_message(chat_id=user_2, text=msg_10t_2.monday, parse_mode='html')
        if datetime.now().weekday() == 1:
            await bot.send_message(chat_id=user_2, text=msg_10t_2.tuesday_second, parse_mode='html')
        if datetime.now().weekday() == 2:
            await bot.send_message(chat_id=user_2, text=msg_10t_2.wednesday_second, parse_mode='html')
        if datetime.now().weekday() == 3:
            await bot.send_message(chat_id=user_2, text=msg_10t_2.thursday_second, parse_mode='html')
        if datetime.now().weekday() == 4:
            await bot.send_message(chat_id=user_2, text=msg_10t_2.friday, parse_mode='html')
        if datetime.now().weekday() == 5:
            await bot.send_message(chat_id=user_2, text=msg_10t_2.saturday_second, parse_mode='html')

scheduler = AsyncIOScheduler(timezone='Europe/Moscow')
scheduler.add_job(send_message_cron, 'cron', day_of_week='mon-sat', hour=7, minute=45)
scheduler.start()

@dp.message_handler(commands=['push'])
async def push(message: types.Message):
    if message.chat.id in admin_id:
        await bot.send_message(chat_id=message.chat.id, text='–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ: ')
        await Form.my_message.set()
    else:
        await bot.send_message(chat_id=message.chat.id, text='–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞')

@dp.message_handler(state=Form.my_message)
async def process_message(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['my_message'] = message.text
    await Form.next()
    await check_message(message)

async def check_message(message: types.Message):
    users = [row[0] for row in cur.execute('SELECT tg_id FROM users').fetchall()]
    for user in users:
        await bot.send_message(chat_id=user, text=message.text, parse_mode='html')

async def cmd_start_db(id: int, username: str):
    user = cur.execute('SELECT * FROM users WHERE tg_id == {key}'.format(key=id)).fetchone()
    username_name = cur.execute('SELECT * FROM users WHERE username == "{key}"'.format(key=username))
    if not user and username_name:
        cur.execute('''INSERT INTO users (tg_id, username) VALUES ("{key}", "{username}")'''.format(key=id, username=username))
        print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!')
        db.commit()

@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
        await cmd_start_db(message.from_user.id, f'@{message.from_user.username}')
        await select_class(message)

async def select_class(message: types.Message):
    await bot.send_message(chat_id=message.chat.id, text="–ü—Ä–∏–≤–µ—Ç —Ç—ã –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –∫–ª–∞—Å—Å: ")
    await Class_id.wait_for_class.set()

class Class_id(StatesGroup):
    wait_for_class = State()

@dp.message_handler(state=Class_id.wait_for_class)
async def proccess_select_class(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['wait_for_class'] = message.text
    await Class_id.next()
    await complete_class(message)

async def set_class(id: int, class_id: str):
    cur.execute('UPDATE users SET class_id = "{class_name}" WHERE tg_id = "{id}"'.format(class_name=class_id, id=id))

async def complete_class(message: types.Message):
    classes = ['10–¢']
    if (isinstance(message.text, str) and 2 <= len(message.text) <= 3 and message.text.upper() in classes):
        await set_class(message.from_user.id, message.text.upper())
        await bot.send_message(chat_id=message.from_user.id, text=f'–£—Å–ø–µ—à–Ω–æ! –í–∞—à –∫–ª–∞—Å—Å: <b>{message.text}</b>', parse_mode='html')
        await group_selection(message)
    else:
        await bot.send_message(chat_id=message.chat.id, text='–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å: ')
        await Class_id.wait_for_class.set()

async def group_selection(message: types.Message):
    markup = types.InlineKeyboardMarkup()
    first_group = types.InlineKeyboardButton('1', callback_data='first_group')
    second_group = types.InlineKeyboardButton('2', callback_data='second_group')
    markup.add(first_group, second_group)
    await bot.send_message(chat_id=message.from_user.id, text='–í—ã –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É –≥—Ä—É–ø–ø!\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –≥—Ä—É–ø–ø—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è', reply_markup=markup)

async def change_group_start(message):
    markup = types.InlineKeyboardMarkup()
    first_group = types.InlineKeyboardButton('1', callback_data='first_group')
    second_group = types.InlineKeyboardButton('2', callback_data='second_group')
    markup.add(first_group, second_group)
    await bot.send_message(chat_id=message.from_user.id, text='–í—ã–±–µ—Ä–∏ —Å–≤–æ—é –≥—Ä—É–ø–ø—É', parse_mode='html', reply_markup=markup)

async def start_schedule_first(message: types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(kb.tommorow, kb.today, kb.days, kb.full, kb.uchitelya, kb.my_class, kb.comm, kb.donate, kb.profile)
    await bot.send_message(chat_id=message.chat.id,
                           text='–•–æ—Ä–æ–æ—à, —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º! –¢–≤–æ—è –≥—Ä—É–ø–ø–∞: <b>1</b>', reply_markup=markup,
                           parse_mode='html')

async def start_schedule_second(message: types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(kb.tommorow, kb.today, kb.days, kb.full, kb.uchitelya, kb.my_class, kb.comm, kb.donate, kb.profile)
    await bot.send_message(chat_id=message.chat.id,
                           text='–•–æ—Ä–æ–æ—à, —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º! –¢–≤–æ—è –≥—Ä—É–ø–ø–∞: <b>2</b>', reply_markup=markup,
                           parse_mode='html')
    
async def donate(message: types.Message):
    markup = types.InlineKeyboardMarkup()
    donatee = types.InlineKeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–Ω–∞—Ç', url='https://www.tinkoff.ru/rm/nurislamov.amir8/cktHx65549')
    markup.add(donatee)
    await bot.send_message(chat_id=message.chat.id,
                           text='–ï—Å–ª–∏ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è —Ä–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ, –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–Ω–∞—Ç –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ :)'.format(
                               message.from_user), reply_markup=markup)


async def change_group(message: types.Message):
    markup = types.InlineKeyboardMarkup()
    change = types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å', callback_data='change')
    markup.row(change)
    await bot.send_message(chat_id=message.chat.id, text='–•–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É?', reply_markup=markup)


async def my_class(message: types.Message):
    await bot.send_message(chat_id=message.chat.id, text=msg_10t_1.cheliki, parse_mode='html')


async def changes_in_schedule(message: types.Message):
    await bot.send_message(chat_id=message.chat.id, text='–ü–æ–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.',
                           parse_mode='html')



@dp.message_handler(content_types=['text'])
async def func(message: types.Message):
    await send_msg_10t.messages_10t(message)



async def add_user_to_group(id, group):
    cur.execute('UPDATE users SET group_id = {group} WHERE tg_id = "{id}"'.format(id=id, group=group))
    db.commit()

@dp.callback_query_handler()
async def callback(call: types.CallbackQuery) -> None:
    if call.data == 'change_group':
        await change_group(call.message)
    elif call.data == 'change':
        await change_group_start(call.message)
    elif call.data == 'donate':
        await donate(call.message)
    elif call.data == 'my_class':
        await my_class(call.message)
    elif call.data == 'changes_in_schedule':
        await changes_in_schedule(call.message)
    elif call.data == 'monday_first':
        await call.message.reply(msg_10t_1.monday, parse_mode='html')
    elif call.data == 'monday_second':
        await call.message.reply(msg_10t_2.monday, parse_mode='html')
    elif call.data == 'tuesday_first':
        await call.message.reply(msg_10t_1.tuesday_first, parse_mode='html')
    elif call.data == 'tuesday_second':
        await call.message.reply(msg_10t_2.tuesday_second, parse_mode='html')
    elif call.data == 'wednesday_first':
        await call.message.reply(msg_10t_1.wednesday_first, parse_mode='html')
    elif call.data == 'wednesday_second':
        await call.message.reply(msg_10t_2.wednesday_second, parse_mode='html')
    elif call.data == 'thursday_first':
        await call.message.reply(msg_10t_1.thursday_first, parse_mode='html')
    elif call.data == 'thursday_second':
        await call.message.reply(msg_10t_2.thursday_second, parse_mode='html')
    elif call.data == 'friday_first':
        await call.message.reply(msg_10t_1.friday, parse_mode='html')
    elif call.data == 'friday_second':
        await call.message.reply(msg_10t_2.friday, parse_mode='html')
    elif call.data == 'saturday_first':
        await call.message.reply(msg_10t_1.saturday_first, parse_mode='html')
    elif call.data == 'saturday_second':
        await call.message.reply(msg_10t_2.saturday_second, parse_mode='html')

    elif call.data == 'notify':
          markup = types.InlineKeyboardMarkup()
          on = types.InlineKeyboardButton('üîî –í–∫–ª—é—á–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è', callback_data='on_notifications')
          off = types.InlineKeyboardButton('üîï –í—ã–∫–ª—é—á–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è', callback_data='off_notifications')
          markup.add(on)
          markup.add(off)
          if call.from_user.id == call.message.chat.id:
              await bot.send_message(chat_id=call.message.chat.id,
                                 text='–ß—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –≤—ã–∫–ª—é—á–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.',
                                 reply_markup=markup)
          else:
              await bot.send_message(chat_id=call.message.chat.id, text="–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö!")
    elif call.data == 'on_notifications':
        await notify_db(call.from_user.id, 1)
        await on_notify(call.message)
    elif call.data == 'off_notifications':
        await notify_db(call.from_user.id, 0)
        await off_notify(call.message)

    elif call.data == 'first_group':
        await add_user_to_group(call.from_user.id, 1)
        await start_schedule_first(call.message)
    elif call.data == 'second_group':
        await add_user_to_group(call.from_user.id, 2)
        await start_schedule_second(call.message)
    elif call.data == 'new_first_group' or call.data == 'new_second_group':
        await notifications(call.message)
keep_alive()
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)