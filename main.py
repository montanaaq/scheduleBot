#            .oooooo..o   .oooooo.   ooooo   ooooo oooooooooooo oooooooooo.   ooooo     ooo ooooo        oooooooooooo      oooooooooo.    .oooooo.   ooooooooooooo 
#            d8P'    `Y8  d8P'  `Y8b  `888'   `888' `888'     `8 `888'   `Y8b  `888'     `8' `888'        `888'     `8      `888'   `Y8b  d8P'  `Y8b  8'   888   `8 
#            Y88bo.      888           888     888   888          888      888  888       8   888          888               888     888 888      888      888      
#            `"Y8888o.  888           888ooooo888   888oooo8     888      888  888       8   888          888oooo8          888oooo888' 888      888      888      
#                `"Y88b 888           888     888   888    "     888      888  888       8   888          888    "          888    `88b 888      888      888      
#            oo     .d8P `88b    ooo   888     888   888       o  888     d88'  `88.    .8'   888       o  888       o       888    .88P `88b    d88'      888      
#            8""88888P'   `Y8bood8P'  o888o   o888o o888ooooood8 o888bood8P'      `YbodP'    o888ooooood8 o888ooooood8      o888bood8P'   `Y8bood8P'      o888o                                                                                                                                  

#                                                         Imports
from aiogram import Dispatcher, Bot, types
from aiogram.utils import executor
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext

from apscheduler.schedulers.asyncio import AsyncIOScheduler

import time
from datetime import datetime
from config import BOT_TOKEN, admin_id

import schedule_classes.T10.messages_10t_1 as msg_10t_1
import schedule_classes.T10.messages_10t_2 as msg_10t_2
import schedule_classes.T10.send_messages_10t as send_msg_10t
import schedule_classes.T10.callbacks as callbacks_10t

import schedule_classes.I8.messages_8i_1 as msg_8i_1
import schedule_classes.I8.messages_8i_2 as msg_8i_2
import schedule_classes.I8.send_messages_8i as send_msg_8i
import schedule_classes.I8.callbacks as callbacks_8i

import keyboards.keyboards as kb
import database_start as db_start

import sqlite3 as sql

# from background import keep_alive

db = sql.connect('database/database.db')
cur = db.cursor()

db_sub = sql.connect('database/subjects.db')
cur_sub = db_sub.cursor()

storage = MemoryStorage()
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot, storage=storage)

async def main():
    await send_msg_10t.send_message_cron()

async def on_startup(_):
    await db_start.main_db_start()

    # await db_start.t10_db_start_1()
    # await db_start.t10_db_start_2()
    # await msg_8i_1.i8_db_start_1()
    # await msg_8i_2.i8_db_start_2()

    await db_start.create_subjects_1()
    await db_start.create_subjects_2()
    await msg_8i_1.create_subjects_1()
    await msg_8i_2.create_subjects_2()
    print('Database started!')
    print('Bot started!')

class Form(StatesGroup):
    my_message = State()
    check_class = State()

# ---------------------------------------------------- Notifications ---------------------------------------------------
# @dp.message_handler(commands=['webapp'])
# async def webapp(message: types.Message):
#     markup = types.ReplyKeyboardMarkup()
#     webapp = types.WebAppInfo("https://schedule-bot.netlify.app")
#     web = types.KeyboardButton('üîó –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', web_app=webapp)
#     markup.add(web)
#     await bot.send_message(chat_id=message.chat.id, text='–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç', reply_markup=markup)

@dp.message_handler(commands=['unregister'])
async def unregister(message: types.Message):
    await bot.send_message(chat_id=message.chat.id, text='–ß—Ç–æ–±—ã —Å–±—Ä–æ—Å–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ', reply_markup=kb.unregister_markup)

@dp.message_handler(commands=['notify'])
async def notifications(message: types.Message):
    users = [row[0] for row in cur.execute('SELECT tg_id FROM users WHERE class_id = 0').fetchall()]
    users_id = [row[0] for row in cur.execute('SELECT tg_id FROM users').fetchall()]
    if message.from_user.id in users_id:
      if not message.from_user.id in users:
          markup = types.InlineKeyboardMarkup()
          markup.add(kb.on)
          markup.add(kb.off)
          if message.from_user.id == message.chat.id:
              await bot.send_message(chat_id=message.chat.id,
                              text='–ß—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –≤—ã–∫–ª—é—á–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.',
                              reply_markup=markup)
          else:
              await bot.send_message(chat_id=message.chat.id, text="–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö!")
      else:
          await bot.send_message(chat_id=message.from_user.id, text='–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏! /start')
    else:
      await bot.send_message(chat_id=message.from_user.id, text='–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏! /start')

async def notify_db(id: int, isNotified: int):
    cur.execute('UPDATE users SET isNotified = "{isNotified}" WHERE tg_id = "{id}"'.format(isNotified=isNotified, id=id))
    db.commit()

async def on_notify(message: types.Message):
    await bot.send_message(chat_id=message.chat.id,
                           text='‚úÖ –£—Å–ø–µ—à–Ω–æ! –û–ø–æ–≤–µ—â–µ–Ω–∏—è –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ <i>–≤–∫–ª—é—á–µ–Ω—ã</i>. <b>–û–Ω–∏ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å [–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–°—É–±–±–æ—Ç–∞] –≤ 7:45.</b>',
                           parse_mode='html')

async def off_notify(message: types.Message):
    await bot.send_message(chat_id=message.chat.id,
                           text='‚úÖ –£—Å–ø–µ—à–Ω–æ! –û–ø–æ–≤–µ—â–µ–Ω–∏—è –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ <i>–≤—ã–∫–ª—é—á–µ–Ω—ã</i>. <b>–¢–µ–ø–µ—Ä—å –æ–Ω–∏ –Ω–µ –±—É–¥—É—Ç –±–æ–ª—å—à–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç—å.</b>',
                           parse_mode='html')

async def start_scheduler(class_id):
    if class_id == '10–¢':
        scheduler = AsyncIOScheduler(timezone='Europe/Moscow')
        scheduler.add_job(send_msg_10t.send_message_cron, 'cron', day_of_week='mon-sat', hour=7, minute=45)
        scheduler.start()
    if class_id == '8–ò':        
        scheduler = AsyncIOScheduler(timezone='Europe/Moscow')
        scheduler.add_job(send_msg_8i.send_message_cron, 'cron', day_of_week='mon-sat', hour=7, minute=45)
        scheduler.start()

@dp.message_handler(commands=['push'])
async def push(message: types.Message):
    if message.chat.id in admin_id:
        await bot.send_message(chat_id=message.chat.id, text='–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ: ')
        await Form.my_message.set()
    else:
        await bot.send_message(chat_id=message.chat.id, text='–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞')

@dp.message_handler(state=Form.my_message)
async def process_message(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['my_message'] = message.text
    await Form.next()
    await check_message(message)

async def check_message(message: types.Message):
    users = [row[0] for row in cur.execute('SELECT tg_id FROM users').fetchall()]
    for user in users:
        await bot.send_message(chat_id=user, text=message.text, parse_mode='html')

async def cmd_start_db(id: int, username: str):
    user = cur.execute('SELECT * FROM users WHERE tg_id == {key}'.format(key=id)).fetchone()
    username_name = cur.execute('SELECT * FROM users WHERE username == "{key}"'.format(key=username))
    if not user and username_name:
        cur.execute('''INSERT INTO users (tg_id, username) VALUES ("{key}", "{username}")'''.format(key=id, username=username))
        print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!')
        db.commit()

@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
        user = cur.execute('SELECT tg_id FROM users WHERE tg_id = "{id}" AND class_id != 0'.format(id=message.from_user.id)).fetchone()
        if not user:
            await cmd_start_db(message.from_user.id, f'@{message.from_user.username}')
            await select_class(message)
        else:
            await bot.send_message(chat_id=message.chat.id, text='–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!')

@dp.message_handler(commands=['edit'])
async def edit_panel(message: types.Message):
    if message.from_user.id in admin_id:
        await bot.send_message(chat_id=message.from_user.id, text=f'–ü—Ä–∏–≤–µ—Ç <b>{message.from_user.username},</b> –∑–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤', parse_mode='html', reply_markup=kb.start_edit)
    else:
        await bot.send_message(chat_id=message.from_user.id, text='–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤!')

async def edit_class(message: types.Message):
    await bot.send_message(chat_id=message.chat.id, text='–í—ã–±–µ—Ä–∏ –∫–ª–∞—Å—Å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è', reply_markup=kb.classes)

async def edit_classes(call: types.CallbackQuery):
    global choosen_class
    if call.data == 'edit_10t':
        choosen_class = '10–¢'
        await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        await select_edit_group(call.message)

async def select_edit_group(message: types.Message):
    await bot.send_message(chat_id=message.chat.id, text='–í—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—ã –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', reply_markup=kb.select_group)

async def select_edit_group_callback(call: types.CallbackQuery):
    global choosen_group
    if call.data == 'edit_first_group':
        choosen_group = 1
        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
        await select_edit_weekday(call.message)
    if call.data == 'edit_second_group':
        choosen_group = 2
        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
        await select_edit_weekday(call.message)
        
async def select_edit_weekday(message: types.Message):
    await bot.send_message(chat_id=message.chat.id, text='–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', reply_markup=kb.weekdays)

async def select_weekday(call: types.CallbackQuery):
    global choosen_weekday
    if call.data == 'edit_monday':
        choosen_weekday = '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫'
        await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        await accept_data(call.message)
    elif call.data == 'edit_tuesday':
        choosen_weekday = '–í—Ç–æ—Ä–Ω–∏–∫'
        await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        await accept_data(call.message)
    elif call.data == 'edit_wednesday':
        choosen_weekday = '–°—Ä–µ–¥–∞'
        await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        await accept_data(call.message)
    elif call.data == 'edit_thursday':
        choosen_weekday = '–ß–µ—Ç–≤–µ—Ä–≥'
        await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        await accept_data(call.message)
    elif call.data == 'edit_friday':
        choosen_weekday = '–ü—è—Ç–Ω–∏—Ü–∞'
        await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        await accept_data(call.message)
    elif call.data == 'edit_saturday':
        choosen_weekday = '–°—É–±–±–æ—Ç–∞'
        await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        await accept_data(call.message)

class AcceptData(StatesGroup):
    data = State()

async def accept_data(message: types.Message):
    await bot.send_message(chat_id=message.chat.id, text='–ù–∞–ø–∏—à–∏—Ç–µ –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ\n\n<b>–ù–æ–º–µ—Ä —É—Ä–æ–∫–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞, –∫–∞–±–∏–Ω–µ—Ç</b>\n\n–ó–∞–ø—è—Ç—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã', parse_mode='html')
    await AcceptData.data.set()

@dp.message_handler(state=AcceptData.data)
async def proccess_accept_data(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['data'] = message.text
    await AcceptData.next()
    await check_data(message)

async def check_data(message: types.Message):
    global choosen_class
    global choosen_group
    global choosen_weekday

    sended_message = (message.text).split(', ')
    subjects = [
        '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞',
        '–†—É—Å—Å.—è–∑',
        '–û–±—â–µ—Å—Ç–≤–æ',
        '–û–ë–ñ',
        '–ò—Å—Ç–æ—Ä–∏—è',
        '–ê–Ω–≥–ª.—è–∑',
        '–§—Ä–∞–Ω—Ü.—è–∑',
        '–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞',
        '–õ–∏—Ç–µ—Ä',
        '–≠–ª.—Ñ–∏–∑–∏–∫–∞',
        '–§–∏–∑-—Ä–∞',
        '–ì–µ–æ–º–µ—Ç—Ä–∏—è',
        '–ê–ª–≥–µ–±—Ä–∞',
        '–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å',
        '–•–∏–º–∏—è',
        '–§–∏–∑–∏–∫–∞',
        '–ë–∏–æ–ª–æ–≥–∏—è',
        '–ì–µ–æ–≥—Ä–∞—Ñ–∏—è',
        '–†–æ–¥–Ω.—è–∑',
        ]
    if len(sended_message) < 3:
        await bot.send_message(chat_id=message.from_user.id, text='–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')
        await AcceptData.data.set()
    else:
        number_of_lesson = sended_message[0]
        name_of_subject = sended_message[1]
        cabinet_name = sended_message[2]
        if len(sended_message) > 3 and not name_of_subject in subjects and 0 < number_of_lesson <= 9:
            await bot.send_message(chat_id=message.from_user.id, text='–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')
            await AcceptData.data.set()
        else:
            await bot.send_message(chat_id=message.from_user.id, text='–£—Å–ø–µ—à–Ω–æ!')
            await set_data(choosen_class, choosen_group, choosen_weekday, number_of_lesson, name_of_subject, cabinet_name)

async def set_data(class_name, group, title, subj_id, subject, cabine):
    if class_name == '10–¢' and group == 1:
        cur_sub.execute('UPDATE subjects_10t_1 SET subjects = "{subject}" WHERE title = "{title}" AND subj_id = "{subj_id}"'.format(
            subject=subject, title=title, subj_id=subj_id
        ))
        cur_sub.execute('UPDATE subjects_10t_1 SET cabines = "{cabine}" WHERE title = "{title}" AND subj_id = "{subj_id}"'.format(
            cabine=cabine, title=title, subj_id=subj_id
        ))
        db_sub.commit()
    elif class_name == '10–¢' and group == 2:
        cur_sub.execute('UPDATE subjects_10t_2 SET subjects = "{subject}" WHERE title = "{title}" AND subj_id = "{subj_id}"'.format(
            subject=subject, cabine=cabine, title=title, subj_id=subj_id
        ))
        cur_sub.execute('UPDATE subjects_10t_2 SET cabines = "{cabine}" WHERE title = "{title}" AND subj_id = "{subj_id}"'.format(
            cabine=cabine, title=title, subj_id=subj_id
        ))
        db_sub.commit()

async def select_class(message: types.Message):
    global class_id
    class_id = await bot.send_message(chat_id=message.chat.id, text="–ü—Ä–∏–≤–µ—Ç —Ç—ã –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –∫–ª–∞—Å—Å: ")
    await Class_id.wait_for_class.set()

class Class_id(StatesGroup):
    wait_for_class = State()

@dp.message_handler(state=Class_id.wait_for_class)
async def proccess_select_class(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['wait_for_class'] = message.text
    await Class_id.next()
    await complete_class(message)

async def set_class(id: int, class_id: str):
    cur.execute('UPDATE users SET class_id = "{class_name}" WHERE tg_id = "{id}"'.format(class_name=class_id, id=id))


async def complete_class(message: types.Message):
    global class_id
    classes = ['10–¢', '8–ò']
    if (isinstance(message.text, str) and 2 <= len(message.text) <= 3 and message.text.upper() in classes):
        await set_class(message.from_user.id, message.text.upper())
        await bot.delete_message(chat_id=message.chat.id, message_id=class_id.message_id)
        await bot.send_message(chat_id=message.from_user.id, text=f'‚úÖ –£—Å–ø–µ—à–Ω–æ! –í–∞—à –∫–ª–∞—Å—Å: <b>{message.text}</b>', parse_mode='html')
        time.sleep(1)
        await group_selection(message)
    else:
        await bot.send_message(chat_id=message.chat.id, text='–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å: \n–ü—Ä–∏–º–µ—Ä: 10–¢')
        await Class_id.wait_for_class.set()

async def group_selection(message: types.Message):
    markup = types.InlineKeyboardMarkup()
    first_group = types.InlineKeyboardButton('1', callback_data='first_group')
    second_group = types.InlineKeyboardButton('2', callback_data='second_group')
    markup.add(first_group, second_group)
    await bot.send_message(chat_id=message.from_user.id, text='–í—ã –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É –≥—Ä—É–ø–ø!\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é –≥—Ä—É–ø–ø—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è', reply_markup=markup)

async def change_group_start(message: types.Message):
    markup = types.InlineKeyboardMarkup()
    first_group = types.InlineKeyboardButton('1', callback_data='first_group')
    second_group = types.InlineKeyboardButton('2', callback_data='second_group')
    markup.add(first_group, second_group)
    await bot.send_message(chat_id=message.chat.id, text='–í—ã–±–µ—Ä–∏ —Å–≤–æ—é –≥—Ä—É–ø–ø—É', parse_mode='html', reply_markup=markup)

async def start_schedule_first(message: types.Message):
    await bot.send_message(chat_id=message.chat.id,
                           text='–•–æ—Ä–æ–æ—à, —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º! –¢–≤–æ—è –≥—Ä—É–ø–ø–∞: <b>1</b>', reply_markup=kb.main,
                           parse_mode='html')

async def start_schedule_second(message: types.Message):
    await bot.send_message(chat_id=message.chat.id,
                           text='–•–æ—Ä–æ–æ—à, —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º! –¢–≤–æ—è –≥—Ä—É–ø–ø–∞: <b>2</b>', reply_markup=kb.main,
                           parse_mode='html')

@dp.message_handler(commands=['donate'])
async def donate(message: types.Message):
    markup = types.InlineKeyboardMarkup()
    donatee = types.InlineKeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–Ω–∞—Ç', url='https://www.tinkoff.ru/rm/nurislamov.amir8/cktHx65549')
    markup.add(donatee)
    await bot.send_message(chat_id=message.chat.id,
                           text='–ï—Å–ª–∏ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è —Ä–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ, –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–Ω–∞—Ç –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ :)'.format(
                               message.from_user), reply_markup=markup)

async def change_group(message: types.Message):
    markup = types.InlineKeyboardMarkup()
    change = types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å', callback_data='change')
    markup.row(change)
    await bot.send_message(chat_id=message.chat.id, text='–•–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É?', reply_markup=markup)

async def changes_in_schedule(message: types.Message):
    await bot.send_message(chat_id=message.chat.id, text='–ü–æ–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.',
                           parse_mode='html')
                                                            # content_types=['text'])
@dp.message_handler(content_types=['text'])
async def func(message: types.Message):
    class_id = cur.execute('SELECT class_id FROM users WHERE tg_id = "{id}"'.format(id=message.from_user.id)).fetchone()[0]
    users = [row[0] for row in cur.execute('SELECT tg_id FROM users WHERE class_id = 0').fetchall()]
    users_id = [row[0] for row in cur.execute('SELECT tg_id FROM users').fetchall()]
    formatted_messages = [
          '–ù–∞ –∑–∞–≤—Ç—Ä–∞',
          '–ù–∞ —Å–µ–≥–æ–¥–Ω—è',
          '–ü–æ–ª–Ω–æ—Å—Ç—å—é',
          '–ü–æ –¥–Ω—è–º',
          '–ü—Ä–æ—Ñ–∏–ª—å',
          '–î–æ–Ω–∞—Ç',
          '/notify',
          '–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å',
          '–£—á–∏—Ç–µ–ª—è',
          '–ú–æ–π –∫–ª–∞—Å—Å',
        ]
    if class_id == '0':
        if (message.text in formatted_messages and not message.from_user.id in users_id or message.text in formatted_messages and message.from_user.id in users):
          await bot.send_message(chat_id=message.from_user.id, text='–ú—ã –Ω–µ –Ω–∞—à–ª–∏ –≤–∞—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ /start –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É!')
    if message.text not in formatted_messages:
            await bot.send_message(chat_id=message.chat.id, text='–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é...')
    elif class_id == '8–ò':
        await send_msg_8i.messages_8i(message)
    elif class_id == '10–¢':
        await send_msg_10t.messages_10t(message)
async def add_user_to_group(id: int, group: int):
    cur.execute('UPDATE users SET group_id = "{group}" WHERE tg_id = "{id}"'.format(id=id, group=int(group)))
    db.commit()

async def proccess_unregister(id: int):
    cur.execute('UPDATE users SET class_id = "" AND group_id = "0" WHERE tg_id = "{id}"'.format(id=id))
    db.commit()

                                                            # callbacks
@dp.callback_query_handler()
async def callback(call: types.CallbackQuery) -> None:
    # profile
    await callbacks_8i.profile(call)
    await callbacks_10t.profile(call)
    # days
    await callbacks_10t.callbacks(call)
    await callbacks_8i.callbacks(call)
    # notifications    

    if call.data == 'unreg':
        await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        await proccess_unregister(call.from_user.id)
        await bot.send_message(chat_id=call.message.chat.id, text='<b>–í—ã —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—Å–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!</b>\n\n<i>/start</i> - –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞', parse_mode='html', reply_markup=types.ReplyKeyboardRemove())

    if call.data == 'register':
        await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        await start_command(call.message)

    elif call.data == 'notify':
          await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
          if call.from_user.id == call.message.chat.id:
              await bot.send_message(chat_id=call.message.chat.id,
                                 text='–ß—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –≤—ã–∫–ª—é—á–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.',
                                 reply_markup=kb.notify_keyboard)
          else:
              await bot.send_message(chat_id=call.message.chat.id, text="–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö!")
    elif call.data == 'on_notifications':
        await notify_db(call.from_user.id, 1)
        await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        class_id = cur.execute('SELECT class_id FROM users WHERE tg_id = "{id}"'.format(id=call.from_user.id)).fetchone()[0]
        await start_scheduler(class_id)
        await on_notify(call.message)
    elif call.data == 'off_notifications':
        await notify_db(call.from_user.id, 0)
        await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        await off_notify(call.message)

    # registration
    elif call.data == 'first_group':
        await add_user_to_group(call.from_user.id, 1)
        await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        await start_schedule_first(call.message)
    elif call.data == 'second_group':
        await add_user_to_group(call.from_user.id, 2)
        await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        await start_schedule_second(call.message)
    elif call.data == 'new_first_group' or call.data == 'new_second_group':
        await notifications(call.message)

    # edit
    elif call.data == 'start_editing':
        await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        await edit_class(call.message)
    await edit_classes(call)
    await select_edit_group_callback(call)
    await select_weekday(call)

# keep_alive()
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=False, on_startup=on_startup)